varImpPlot(rf_fhd_predict2, n.var=11)
write.csv(importance(rf_fhd_predict2), 'D:/cambs/R_CH3_ALSspec/F2_RF_importance/rf_fhd_predict2.csv')
#model validation using 30% of data
valid_rf_fhd_predict2 <- predict(rf_fhd_predict2, predict2_valid, type = "response")
#RMSE
res_valid_rf_fhd_predict2 <- predict2_valid$fhd-valid_rf_fhd_predict2
RMSE_valid_rf_fhd_predict2 <- sqrt(mean(res_valid_rf_fhd_predict2^2)); RMSE_valid_rf_fhd_predict2
#make temporal predictions: 2005
pred_rf_fhd_predict2 <- predict(rf_fhd_predict2, sub2005, type = "response")
#RMSE
res_pred_rf_fhd_predict2 <- sub2005$fhd-pred_rf_fhd_predict2
RMSE_pred_rf_fhd_predict2 <- sqrt(mean(res_pred_rf_fhd_predict2^2)); RMSE_pred_rf_fhd_predict2
rf_fhd_predict2 <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_fhd_predict2
rf_entropy_predict2
rf_fhd_predict2 <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
write.csv(importance(rf_fhd_predict2), 'D:/cambs/R_CH3_ALSspec/F2_RF_importance/rf_fhd_predict2.csv')
#model validation using 30% of data
valid_rf_fhd_predict2 <- predict(rf_fhd_predict2, predict2_valid, type = "response")
#RMSE
res_valid_rf_fhd_predict2 <- predict2_valid$fhd-valid_rf_fhd_predict2
RMSE_valid_rf_fhd_predict2 <- sqrt(mean(res_valid_rf_fhd_predict2^2)); RMSE_valid_rf_fhd_predict2
#model validation using 30% of data
valid_rf_fhd_predict1b <- predict(rf_fhd_predict1b, predict1b_valid, type = "response")
#model validation using 30% of data
valid_rf_fhd_predict1b <- predict(rf_fhd_predict1b, predict1b_valid, type = "response")
#model validation using 30% of data
valid_rf_fhd_predict1b <- predict(rf_fhd_predict1b, predict1b_valid, type = "response")
rf_fhd_predict2 <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_fhd_predict2
set.seed(2024)
rf_fhd_predict2 <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_fhd_predict2
set.seed(2024)
rf_fhd_predict2 <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_fhd_predict2
#importance
varImpPlot(rf_fhd_predict2, n.var=11)
write.csv(importance(rf_fhd_predict2), 'D:/cambs/R_CH3_ALSspec/F2_RF_importance/rf_fhd_predict2.csv')
#model validation using 30% of data
valid_rf_fhd_predict2 <- predict(rf_fhd_predict2, predict2_valid, type = "response")
#RMSE
res_valid_rf_fhd_predict2 <- predict2_valid$fhd-valid_rf_fhd_predict2
RMSE_valid_rf_fhd_predict2 <- sqrt(mean(res_valid_rf_fhd_predict2^2)); RMSE_valid_rf_fhd_predict2
#make temporal predictions: 2005
pred_rf_fhd_predict2 <- predict(rf_fhd_predict2, sub2005, type = "response")
#RMSE
res_pred_rf_fhd_predict2 <- sub2005$fhd-pred_rf_fhd_predict2
RMSE_pred_rf_fhd_predict2 <- sqrt(mean(res_pred_rf_fhd_predict2^2)); RMSE_pred_rf_fhd_predict2
#make temporal predictions: 2012
pred_rf_fhd_predict2 <- predict(rf_fhd_predict2, sub2012, type = "response")
#RMSE
res_pred_rf_fhd_predict2 <- sub2012$fhd-pred_rf_fhd_predict2
RMSE_pred_rf_fhd_predict2 <- sqrt(mean(res_pred_rf_fhd_predict2^2)); RMSE_pred_rf_fhd_predict2
set.seed(2024)
rf_cc_predict2 <- randomForest(cc ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_cc_predict2
#importance
varImpPlot(rf_cc_predict2, n.var=11)
write.csv(importance(rf_cc_predict2), 'D:/cambs/R_CH3_ALSspec/F2_RF_importance/rf_cc_predict2.csv')
#model validation using 30% of data
valid_rf_cc_predict2 <- predict(rf_cc_predict2, predict2_valid, type = "response")
#RMSE
res_valid_rf_cc_predict2 <- predict2_valid$cc-valid_rf_cc_predict2
RMSE_valid_rf_cc_predict2 <- sqrt(mean(res_valid_rf_cc_predict2^2)); RMSE_valid_rf_cc_predict2
#make temporal predictions: 2005
pred_rf_cc_predict2 <- predict(rf_cc_predict2, sub2005, type = "response")
#RMSE
res_pred_rf_cc_predict2 <- sub2005$cc-pred_rf_cc_predict2
RMSE_pred_rf_cc_predict2 <- sqrt(mean(res_pred_rf_cc_predict2^2)); RMSE_pred_rf_cc_predict2
#make temporal predictions: 2012
pred_rf_cc_predict2 <- predict(rf_cc_predict2, sub2012, type = "response")
#RMSE
res_pred_rf_cc_predict2 <- sub2012$cc-pred_rf_cc_predict2
RMSE_pred_rf_cc_predict2 <- sqrt(mean(res_pred_rf_cc_predict2^2)); RMSE_pred_rf_cc_predict2
set.seed(2024)
rf_crr_predict2 <- randomForest(crr ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = predict2_train, importance = TRUE)
rf_crr_predict2
#importance
varImpPlot(rf_crr_predict2, n.var=11)
write.csv(importance(rf_crr_predict2), 'D:/cambs/R_CH3_ALSspec/F2_RF_importance/rf_crr_predict2.csv')
#model validation using 30% of data
valid_rf_crr_predict2 <- predict(rf_crr_predict2, predict2_valid, type = "response")
#RMSE
res_valid_rf_crr_predict2 <- predict2_valid$crr-valid_rf_crr_predict2
RMSE_valid_rf_crr_predict2 <- sqrt(mean(res_valid_rf_crr_predict2^2)); RMSE_valid_rf_crr_predict2
#make temporal predictions: 2005
pred_rf_crr_predict2 <- predict(rf_crr_predict2, sub2005, type = "response")
#RMSE
res_pred_rf_crr_predict2 <- sub2005$crr-pred_rf_crr_predict2
RMSE_pred_rf_crr_predict2 <- sqrt(mean(res_pred_rf_crr_predict2^2)); RMSE_pred_rf_crr_predict2
#make temporal predictions: 2012
pred_rf_crr_predict2 <- predict(rf_crr_predict2, sub2012, type = "response")
#RMSE
res_pred_rf_crr_predict2 <- sub2012$crr-pred_rf_crr_predict2
RMSE_pred_rf_crr_predict2 <- sqrt(mean(res_pred_rf_crr_predict2^2)); RMSE_pred_rf_crr_predict2
####predict max height####
set.seed(2024)
rf_max_forecast <- randomForest(zmax ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_max_forecast
#model validation using 30% of data
valid_rf_max_forecast <- predict(rf_max_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_max_forecast <- predict(rf_max_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_max_forecast_raster2015 <-predict(WIstackpred2015, rf_max_forecast)
plot(WIpred_rf_max_forecast_raster2015)
#make absolute differenced raster
diff_max_forecast <- WIpred_rf_max_forecast_raster2015-WImetrics2015_max
plot(abs(diff_max_forecast)) #plot diff for WI
plot(WImetrics2015_max)
####predict mean height####
set.seed(2024)
rf_mean_forecast <- randomForest(zmean ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_mean_forecast
#model validation using 30% of data
valid_rf_mean_forecast <- predict(rf_mean_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_mean_forecast <- predict(rf_mean_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_mean_forecast_raster2015 <-predict(WIstackpred2015, rf_mean_forecast)
plot(WIpred_rf_mean_forecast_raster2015)
#make absolute differenced raster
diff_mean_forecast <- WIpred_rf_mean_forecast_raster2015-WImetrics2015_mean
plot(abs(diff_mean_forecast)) #plot diff for WI
plot(WImetrics2015_mean)
####predict sd height####
set.seed(2024)
rf_sd_forecast <- randomForest(zsd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_sd_forecast
#model validation using 30% of data
valid_rf_sd_forecast <- predict(rf_sd_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_sd_forecast <- predict(rf_sd_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_sd_forecast_raster2015 <-predict(WIstackpred2015, rf_sd_forecast)
plot(WIpred_rf_sd_forecast_raster2015)
#make absolute differenced raster
diff_sd_forecast <- WIpred_rf_sd_forecast_raster2015-WImetrics2015_sd
plot(abs(diff_sd_forecast)) #plot diff for WI
plot(WImetrics2015_sd)
####predict entropy####
set.seed(2024)
rf_entropy_forecast <- randomForest(entropy ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_entropy_forecast
#model validation using 30% of data
valid_rf_entropy_forecast <- predict(rf_entropy_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_entropy_forecast <- predict(rf_entropy_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_entropy_forecast_raster2015 <-predict(WIstackpred2015, rf_entropy_forecast)
plot(WIpred_rf_entropy_forecast_raster2015)
#make absolute differenced raster
diff_entropy_forecast <- WIpred_rf_entropy_forecast_raster2015-WImetrics2015_entropy
plot(abs(diff_entropy_forecast)) #plot diff for WI
plot(WImetrics2015_entropy)
plot(1-(abs(diff_entropy_forecast))) #plot diff for WI
plot(abs(diff_entropy_forecast)) #plot diff for WI
####predict fhd####
set.seed(2024)
rf_fhd_forecast <- randomForest(fhd ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_fhd_forecast
#model validation using 30% of data
valid_rf_fhd_forecast <- predict(rf_fhd_forecast, forecast_valid, type = "response")
#RMSE
res_valid_rf_fhd_forecast <- forecast_valid$fhd-valid_rf_fhd_forecast
#make temporal predictions
pred_rf_fhd_forecast <- predict(rf_fhd_forecast, sub2015, type = "response")
#RMSE
res_pred_rf_fhd_forecast <- sub2015$fhd-pred_rf_fhd_forecast
#predict on raster
WIpred_rf_fhd_forecast_raster2015 <-predict(WIstackpred2015, rf_fhd_forecast)
plot(WIpred_rf_fhd_forecast_raster2015)
#make absolute differenced raster
diff_fhd_forecast <- WIpred_rf_fhd_forecast_raster2015-WImetrics2015_fhd
plot(abs(diff_fhd_forecast)) #plot diff for WI
plot(WImetrics2015_fhd)
####predict cc####
set.seed(2024)
rf_cc_forecast <- randomForest(cc ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_cc_forecast
#model validation using 30% of data
valid_rf_cc_forecast <- predict(rf_cc_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_cc_forecast <- predict(rf_cc_forecast, sub2015, type = "response")
plot(sub2015$cc, pred_rf_cc_forecast)
#predict on raster
WIpred_rf_cc_forecast_raster2015 <-predict(WIstackpred2015, rf_cc_forecast)
plot(WIpred_rf_cc_forecast_raster2015)
#make absolute differenced raster
diff_cc_forecast <- WIpred_rf_cc_forecast_raster2015-WImetrics2015_cc
plot(abs(diff_cc_forecast)) #plot diff for WI
#goal is pixel-by-pixel prediction
normALS2015<-readLAS("D:/cambs/R_CH3_ALSspec/ALS_norm_woods/norm_ALS2015.las")
#goal is pixel-by-pixel prediction
normALS2015<-readLAS("D:/cambs/R_CH3_ALSspec/ALS_norm_woods/norm_ALS2015.las")
WInormLAS <- clip_rectangle(normALS2015, 520015.14,279526.33, 520630.84, 280113.2)
plot(WInormLAS, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 29) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 28) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 27) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 26) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 25) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 24) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 23) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 29) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 24) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
outliers<- filter_poi(WInormLAS, Z >= 0, Z <= 23) #5 points over 100
plot(outliers, color = "Z", bg = "white", axis = TRUE, legend = TRUE)
plot(outliers, color = "Z", bg = "white", legend = TRUE)
####predict cc####
set.seed(2024)
rf_cc_forecast <- randomForest(cc ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
rf_cc_forecast
#model validation using 30% of data
valid_rf_cc_forecast <- predict(rf_cc_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_cc_forecast <- predict(rf_cc_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_cc_forecast_raster2015 <-predict(WIstackpred2015, rf_cc_forecast)
plot(WIpred_rf_cc_forecast_raster2015)
#make absolute differenced raster
diff_cc_forecast <- WIpred_rf_cc_forecast_raster2015-WImetrics2015_cc
plot(abs(diff_cc_forecast)) #plot diff for WI
plot(WImetrics2015_cc)
####predict crr####
set.seed(2024)
rf_crr_forecast <- randomForest(crr ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = forecast_train, importance = TRUE)
#model validation using 30% of data
valid_rf_crr_forecast <- predict(rf_crr_forecast, forecast_valid, type = "response")
#make temporal predictions
pred_rf_crr_forecast <- predict(rf_crr_forecast, sub2015, type = "response")
#predict on raster
WIpred_rf_crr_forecast_raster2015 <-predict(WIstackpred2015, rf_crr_forecast)
plot(WIpred_rf_crr_forecast_raster2015)
#make absolute differenced raster
diff_crr_forecast <- WIpred_rf_crr_forecast_raster2015-WImetrics2015_crr
plot(abs(diff_crr_forecast)) #plot diff for WI
plot(WImetrics2015_crr)
library(terra)
library(RStoolbox)
library(satellite)
library(landsat)
library(terra)
library(lidR)
library(sf)
library(randomForest)
####bring in Landsat metrics####
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/Landsat_metrics/CC/")
temp <- list.files(pattern="\\.csv$")
CC_Landsat <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/Landsat_metrics/CH/")
temp <- list.files(pattern="\\.csv$")
CH_Landsat <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/Landsat_metrics/BT/")
temp <- list.files(pattern="\\.csv$")
BT_Landsat <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/Landsat_metrics/WW/")
temp <- list.files(pattern="\\.csv$")
WW_Landsat <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
####bring in ALS metrics###
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/ALS_metrics/CC/")
temp <- list.files(pattern="\\.csv$")
CC_ALS <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/ALS_metrics/CH/")
temp <- list.files(pattern="\\.csv$")
CH_ALS <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/ALS_metrics/BT/")
temp <- list.files(pattern="\\.csv$")
BT_ALS <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("D:/cambs/R_CH3_ALSspec/plotmetrics/ALS_metrics/WW/")
temp <- list.files(pattern="\\.csv$")
WW_ALS <- do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
BT_all<- read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_metrics/BT_merged.csv")
CC_all<- read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_metrics/CC_merged.csv")
CH_all<- read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_metrics/CH_merged.csv")
WW_all<- read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_metrics/WW_merged.csv")
#balance presence and absence - same values in ALL, ALS and Landsat
sum(BT_all$species == "BT_presence", na.rm=T) #429
sum(BT_all$species == "BT_absence", na.rm=T) #790
sum(CC_all$species == "CC_presence", na.rm=T) #109
sum(CC_all$species == "CC_absence", na.rm=T) #1028
sum(CH_all$species == "CH_presence", na.rm=T) #416
sum(CH_all$species == "CH_absence", na.rm=T) #776
sum(WW_all$species == "WW_presence", na.rm=T) #257
sum(WW_all$species == "WW_absence", na.rm=T) #703
#split presence and absence
BT_all_presence<-BT_all[BT_all$species == "BT_presence",]
BT_all_absence<- BT_all[BT_all$species == "BT_absence",]
CC_all_presence<-CC_all[CC_all$species == "CC_presence",]
CC_all_absence<-CC_all[CC_all$species == "CC_absence",]
CH_all_presence<-CH_all[CH_all$species == "CH_presence",]
CH_all_absence<-CH_all[CH_all$species == "CH_absence", ]
WW_all_presence<-WW_all[WW_all$species == "WW_presence",]
WW_all_absence<-WW_all[WW_all$species == "WW_absence",]
BT_Landsat_presence<-BT_Landsat[BT_Landsat$species == "BT_presence",]
BT_Landsat_absence<- BT_Landsat[BT_Landsat$species == "BT_absence",]
CC_Landsat_presence<-CC_Landsat[CC_Landsat$species == "CC_presence",]
CC_Landsat_absence<-CC_Landsat[CC_Landsat$species == "CC_absence",]
CH_Landsat_presence<-CH_Landsat[CH_Landsat$species == "CH_presence",]
CH_Landsat_absence<-CH_Landsat[CH_Landsat$species == "CH_absence", ]
WW_Landsat_presence<-WW_Landsat[WW_Landsat$species == "WW_presence",]
WW_Landsat_absence<-WW_Landsat[WW_Landsat$species == "WW_absence",]
BT_ALS_presence<-BT_ALS[BT_ALS$species == "BT_presence",]
BT_ALS_absence<- BT_ALS[BT_ALS$species == "BT_absence",]
CC_ALS_presence<-CC_ALS[CC_ALS$species == "CC_presence",]
CC_ALS_absence<-CC_ALS[CC_ALS$species == "CC_absence",]
CH_ALS_presence<-CH_ALS[CH_ALS$species == "CH_presence",]
CH_ALS_absence<-CH_ALS[CH_ALS$species == "CH_absence", ]
WW_ALS_presence<-WW_ALS[WW_ALS$species == "WW_presence",]
WW_ALS_absence<-WW_ALS[WW_ALS$species == "WW_absence",]
#need to remove 361 BT absences of 790
set.seed(2024); remove_BT_Landsat_absence <- sample(nrow(BT_Landsat_absence), 0.5431 *nrow(BT_Landsat_absence), replace = FALSE)
BT_Landsat_absence <- BT_Landsat_absence[remove_BT_Landsat_absence,]
set.seed(2024); remove_BT_ALS_absence <- sample(nrow(BT_ALS_absence), 0.5431 *nrow(BT_ALS_absence), replace = FALSE)
BT_ALS_absence <- BT_ALS_absence[remove_BT_ALS_absence,]
set.seed(2024); remove_BT_all_absence <- sample(nrow(BT_all_absence), 0.5431 *nrow(BT_all_absence), replace = FALSE)
BT_all_absence <- BT_all_absence[remove_BT_all_absence,]
#need to remove 919 CC absences
set.seed(2024); remove_CC_Landsat_absence <- sample(nrow(CC_Landsat_absence), 0.1062 *nrow(CC_Landsat_absence), replace = FALSE)
CC_Landsat_absence <- CC_Landsat_absence[remove_CC_Landsat_absence,]
set.seed(2024); remove_CC_ALS_absence <- sample(nrow(CC_ALS_absence), 0.1062 *nrow(CC_ALS_absence), replace = FALSE)
CC_ALS_absence <- CC_ALS_absence[remove_CC_ALS_absence,]
set.seed(2024); remove_CC_all_absence <- sample(nrow(CC_all_absence), 0.1062 *nrow(CC_all_absence), replace = FALSE)
CC_all_absence <- CC_all_absence[remove_CC_all_absence,]
#need to remove 360 CH absences
set.seed(2024); remove_CH_Landsat_absence <- sample(nrow(CH_Landsat_absence), 0.5365 *nrow(CH_Landsat_absence), replace = FALSE)
CH_Landsat_absence <- CH_Landsat_absence[remove_CH_Landsat_absence,]
set.seed(2024); remove_CH_ALS_absence <- sample(nrow(CH_ALS_absence), 0.5365 *nrow(CH_ALS_absence), replace = FALSE)
CH_ALS_absence <- CH_ALS_absence[remove_CH_ALS_absence,]
set.seed(2024); remove_CH_all_absence <- sample(nrow(CH_all_absence), 0.5365 *nrow(CH_all_absence), replace = FALSE)
CH_all_absence <- CH_all_absence[remove_CH_all_absence,]
#need to remove 446 WW absences
set.seed(2024); remove_WW_Landsat_absence <- sample(nrow(WW_Landsat_absence), 0.3657 *nrow(WW_Landsat_absence), replace = FALSE)
WW_Landsat_absence <- WW_Landsat_absence[remove_WW_Landsat_absence,]
set.seed(2024); remove_WW_ALS_absence <- sample(nrow(WW_ALS_absence), 0.3657 *nrow(WW_ALS_absence), replace = FALSE)
WW_ALS_absence <- WW_ALS_absence[remove_WW_ALS_absence,]
set.seed(2024); remove_WW_all_absence <- sample(nrow(WW_all_absence), 0.3657 *nrow(WW_all_absence), replace = FALSE)
WW_all_absence <- WW_all_absence[remove_WW_all_absence,]
#re-merge the balanced datasets
BT_Landsat_balancedlist <- list(BT_Landsat_presence,BT_Landsat_absence)
BT_Landsat_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), BT_Landsat_balancedlist)
BT_Landsat_balanced
BT_ALS_balancedlist <- list(BT_ALS_presence,BT_ALS_absence)
BT_ALS_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), BT_ALS_balancedlist)
BT_ALS_balanced
BT_all_balancedlist <- list(BT_all_presence,BT_all_absence)
BT_all_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), BT_all_balancedlist)
BT_all_balanced
CC_Landsat_balancedlist <- list(CC_Landsat_presence,CC_Landsat_absence)
CC_Landsat_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CC_Landsat_balancedlist)
CC_Landsat_balanced
CC_ALS_balancedlist <- list(CC_ALS_presence,CC_ALS_absence)
CC_ALS_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CC_ALS_balancedlist)
CC_ALS_balanced
CC_all_balancedlist <- list(CC_all_presence,CC_all_absence)
CC_all_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CC_all_balancedlist)
CC_all_balanced
CH_Landsat_balancedlist <- list(CH_Landsat_presence,CH_Landsat_absence)
CH_Landsat_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CH_Landsat_balancedlist)
CH_Landsat_balanced
CH_ALS_balancedlist <- list(CH_ALS_presence,CH_ALS_absence)
CH_ALS_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CH_ALS_balancedlist)
CH_ALS_balanced
CH_all_balancedlist <- list(CH_all_presence,CH_all_absence)
CH_all_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), CH_all_balancedlist)
CH_all_balanced
WW_Landsat_balancedlist <- list(WW_Landsat_presence,WW_Landsat_absence)
WW_Landsat_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), WW_Landsat_balancedlist)
WW_Landsat_balanced
WW_ALS_balancedlist <- list(WW_ALS_presence,WW_ALS_absence)
WW_ALS_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), WW_ALS_balancedlist)
WW_ALS_balanced
WW_all_balancedlist <- list(WW_all_presence,WW_all_absence)
WW_all_balanced <-Reduce(function(x,y) merge(x,y, all=TRUE), WW_all_balancedlist)
WW_all_balanced
BT_Landsat_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/BT_Landsat_balanced.csv")
BT_ALS_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/BT_ALS_balanced.csv")
BT_all_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/BT_all_balanced.csv")
CC_Landsat_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CC_Landsat_balanced.csv")
CC_ALS_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CC_ALS_balanced.csv")
CC_all_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CC_all_balanced.csv")
CH_Landsat_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CH_Landsat_balanced.csv")
CH_ALS_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CH_ALS_balanced.csv")
CH_all_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/CH_all_balanced.csv")
WW_Landsat_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/WW_Landsat_balanced.csv")
WW_ALS_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/WW_ALS_balanced.csv")
WW_all_balanced<-read.csv("D:/cambs/R_CH3_ALSspec/plotmetrics/all_balanced_naremoved_metrics/WW_all_balanced.csv")
#make species a factor
BT_Landsat_balanced$species = as.factor(BT_Landsat_balanced$species)
BT_ALS_balanced$species = as.factor(BT_ALS_balanced$species)
BT_all_balanced$species = as.factor(BT_all_balanced$species)
CC_Landsat_balanced$species = as.factor(CC_Landsat_balanced$species)
CC_ALS_balanced$species = as.factor(CC_ALS_balanced$species)
CC_all_balanced$species = as.factor(CC_all_balanced$species)
CH_Landsat_balanced$species = as.factor(CH_Landsat_balanced$species)
CH_ALS_balanced$species = as.factor(CH_ALS_balanced$species)
CH_all_balanced$species = as.factor(CH_all_balanced$species)
WW_Landsat_balanced$species = as.factor(WW_Landsat_balanced$species)
WW_ALS_balanced$species = as.factor(WW_ALS_balanced$species)
WW_all_balanced$species = as.factor(WW_all_balanced$species)
#set up training and validation 70:30
set.seed(2024); BT_Landsat_train <- sample(nrow(BT_Landsat_balanced), 0.7*nrow(BT_Landsat_balanced), replace = FALSE)
BT_Landsat_valid <- BT_Landsat_balanced[-BT_Landsat_train,]
BT_Landsat_train <- BT_Landsat_balanced[BT_Landsat_train,]
set.seed(2024); BT_ALS_train <- sample(nrow(BT_ALS_balanced), 0.7*nrow(BT_ALS_balanced), replace = FALSE)
BT_ALS_valid <- BT_ALS_balanced[-BT_ALS_train,]
BT_ALS_train <- BT_ALS_balanced[BT_ALS_train,]
set.seed(2024); BT_all_train <- sample(nrow(BT_all_balanced), 0.7*nrow(BT_all_balanced), replace = FALSE)
BT_all_valid <- BT_all_balanced[-BT_all_train,]
BT_all_train <- BT_all_balanced[BT_all_train,]
set.seed(2024); CC_Landsat_train <- sample(nrow(CC_Landsat_balanced), 0.7*nrow(CC_Landsat_balanced), replace = FALSE)
CC_Landsat_valid <- CC_Landsat_balanced[-CC_Landsat_train,]
CC_Landsat_train <- CC_Landsat_balanced[CC_Landsat_train,]
set.seed(2024); CC_ALS_train <- sample(nrow(CC_ALS_balanced), 0.7*nrow(CC_ALS_balanced), replace = FALSE)
CC_ALS_valid <- CC_ALS_balanced[-CC_ALS_train,]
CC_ALS_train <- CC_ALS_balanced[CC_ALS_train,]
set.seed(2024); CC_all_train <- sample(nrow(CC_all_balanced), 0.7*nrow(CC_all_balanced), replace = FALSE)
CC_all_valid <- CC_all_balanced[-CC_all_train,]
CC_all_train <- CC_all_balanced[CC_all_train,]
set.seed(2024); CH_Landsat_train <- sample(nrow(CH_Landsat_balanced), 0.7*nrow(CH_Landsat_balanced), replace = FALSE)
CH_Landsat_valid <- CH_Landsat_balanced[-CH_Landsat_train,]
CH_Landsat_train <- CH_Landsat_balanced[CH_Landsat_train,]
set.seed(2024); CH_ALS_train <- sample(nrow(CH_ALS_balanced), 0.7*nrow(CH_ALS_balanced), replace = FALSE)
CH_ALS_valid <- CH_ALS_balanced[-CH_ALS_train,]
CH_ALS_train <- CH_ALS_balanced[CH_ALS_train,]
set.seed(2024); CH_all_train <- sample(nrow(CH_all_balanced), 0.7*nrow(CH_all_balanced), replace = FALSE)
CH_all_valid <- CH_all_balanced[-CH_all_train,]
CH_all_train <- CH_all_balanced[CH_all_train,]
set.seed(2024); WW_Landsat_train <- sample(nrow(WW_Landsat_balanced), 0.7*nrow(WW_Landsat_balanced), replace = FALSE)
WW_Landsat_valid <- WW_Landsat_balanced[-WW_Landsat_train,]
WW_Landsat_train <- WW_Landsat_balanced[WW_Landsat_train,]
set.seed(2024); WW_ALS_train <- sample(nrow(WW_ALS_balanced), 0.7*nrow(WW_ALS_balanced), replace = FALSE)
WW_ALS_valid <- WW_ALS_balanced[-WW_ALS_train,]
WW_ALS_train <- WW_ALS_balanced[WW_ALS_train,]
set.seed(2024); WW_all_train <- sample(nrow(WW_all_balanced), 0.7*nrow(WW_all_balanced), replace = FALSE)
WW_all_valid <- WW_all_balanced[-WW_all_train,]
WW_all_train <- WW_all_balanced[WW_all_train,]
####RF####
####Landsat only####
#BT#
set.seed(2024); rf_BT_Landsat <- randomForest(species ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = BT_Landsat_train, importance = TRUE)
rf_BT_Landsat
#CH#
set.seed(2024); rf_CH_Landsat <- randomForest(species ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = CH_Landsat_train, importance = TRUE)
rf_CH_Landsat
#CC#
set.seed(2024); rf_CC_Landsat <- randomForest(species ~
blue+green+red+nir+swir1+swir2+
NDVI+NBR+brightness+wetness+greenness,
data = CC_Landsat_train, importance = TRUE)
rf_CC_Landsat
